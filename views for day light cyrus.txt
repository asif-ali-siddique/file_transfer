

CREATE VIEW PROD_GLOBAL_MONITORING.PUBLISH.F_CDP_DAYLIGHT_CYRUS_DIVISION_BUDGET_DAILY AS
WITH PRE AS (
SELECT 
         DB.DIVISION_CODE
        ,DSA.SNOWFLAKE_ACCOUNT_NAME
        ,DB.BUDGET_YEAR
        ,CD.CALENDAR_DATE AS BUDGET_DATE
        ,DB.CURRENCY,
        CASE 
        WHEN BUDGET_YEAR = 2024  THEN 800000
        ELSE DB.AMOUNT
        END AS YEARLY_BUDGET
        ,MIN(CD.CALENDAR_DATE) OVER (PARTITION BY DB.DIVISION_CODE, DB.BUDGET_YEAR, DB.CURRENCY) AS FIRST_DAY
        ,MAX(CD.CALENDAR_DATE) OVER (PARTITION BY DB.DIVISION_CODE, DB.BUDGET_YEAR, DB.CURRENCY) AS LAST_DAY
        ,DATEDIFF(DAY,FIRST_DAY,LAST_DAY)+1 AS NUMBER_OF_DAYS
        ,YEARLY_BUDGET / NUMBER_OF_DAYS AS DAILY_BUDGET
    FROM
        CORE.DIVISION_BUDGET DB
        JOIN
        CORE.CALENDAR_DATE CD ON DB.BUDGET_YEAR = CD.YEAR
        JOIN
        PUBLISH.D_SNOWFLAKE_ACCOUNT DSA
        ON DSA.DIVISION_CODE = DB.DIVISION_CODE
        WHERE DSA.DIVISION_CODE = 'PH-CDP'
        AND DB.CURRENCY = 'EUR'
        AND DSA.SNOWFLAKE_ACCOUNT_CATEGORY <> 'UNCLASSIFIED'AND DSA.SNOWFLAKE_ACCOUNT_CATEGORY <> 'BUDGET'
        AND DSA.SNOWFLAKE_REGION = 'AWS_US_EAST_1'
        )
SELECT
DIVISION_CODE,
SNOWFLAKE_ACCOUNT_NAME,
BUDGET_YEAR,
BUDGET_DATE,
CURRENCY,
--YEARLY_BUDGET,
--NUMBER_OF_DAYS,
ROUND(DAILY_BUDGET,2) as DAILY_BUDGET
FROM PRE
;


  


CREATE OR REPLACE VIEW PROD_GLOBAL_MONITORING.PUBLISH.F_CDP_DAYLIGHT_CYRUS_DIV_ACC_USAGE_VS_BUDGET_DAILY AS
SELECT 
     BUDGET.DIVISION_CODE
    ,BUDGET.SNOWFLAKE_ACCOUNT_NAME
    ,BUDGET.BUDGET_DATE
    ,BUDGET.CURRENCY
    ,BUDGET.DAILY_BUDGET AS AMOUNT_BUDGETED
    ,USAGE.AMOUNT_USED
FROM 
    PUBLISH.F_CDP_DAYLIGHT_CYRUS_DIVISION_BUDGET_DAILY BUDGET
    JOIN
    PUBLISH.F_CDP_DAYLIGHT_CYRUS_DIVISION_USAGE_DAILY USAGE ON
            BUDGET.DIVISION_CODE = USAGE.DIVISION_CODE
        AND BUDGET.SNOWFLAKE_ACCOUNT_NAME = USAGE.ACCOUNT_NAME
        AND BUDGET.BUDGET_DATE   = USAGE.USAGE_DATE
        AND BUDGET.CURRENCY      = USAGE.CURRENCY
;



CREATE or replace VIEW PROD_GLOBAL_MONITORING.PUBLISH.F_CDP_DAYLIGHT_CYRUS_DIVISION_USAGE_DAILY AS
WITH GROUP_LEVEL AS 
(
    SELECT 
         COALESCE(DSA.DIVISION_CODE,'UNKNOWN') AS DIVISION_CODE
        ,AUD.ACCOUNT_NAME
        ,AUD.USAGE_DATE
        ,AUD.CURRENCY
        --,SUM(AUD.CREDITS_USED) AS CREDITS_USED
        ,SUM(AUD.AMOUNT_USED) AS AMOUNT_USED
    FROM 
        PUBLISH.F_ACCOUNT_USAGE_DAILY AUD
        LEFT JOIN
        PUBLISH.D_SNOWFLAKE_ACCOUNT DSA ON AUD.ACCOUNT_NAME = DSA.SNOWFLAKE_ACCOUNT_NAME
        WHERE DSA.DIVISION_CODE = 'PH-CDP'
        AND AUD.CURRENCY = 'EUR'
        AND DSA.SNOWFLAKE_ACCOUNT_CATEGORY <> 'UNCLASSIFIED'AND DSA.SNOWFLAKE_ACCOUNT_CATEGORY <> 'BUDGET'
        AND DSA.SNOWFLAKE_REGION = 'AWS_US_EAST_1'
    GROUP BY
         DSA.DIVISION_CODE
        ,AUD.ACCOUNT_NAME
        ,AUD.USAGE_DATE
        ,AUD.CURRENCY
)
SELECT
     DIVISION_CODE
    ,ACCOUNT_NAME
    ,USAGE_DATE
    ,CURRENCY
    ,AMOUNT_USED
    ,SUM(AMOUNT_USED) OVER 
     (
         PARTITION BY DIVISION_CODE,ACCOUNT_NAME, CURRENCY, YEAR(USAGE_DATE)
         ORDER BY USAGE_DATE 
         ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
     ) AS AMOUNT_USED_CUMULATIVE_YTD
FROM
    GROUP_LEVEL;


CREATE OR REPLACE VIEW CPH_DB_COMMONS_PROD.MONITORING.VW_CALENDER_DATE_DIMENSION
AS
 -- GENERATES A DAY ROW for 730 days
  WITH CTE_DATE_GENERATOR AS (
    SELECT DATEADD(DAY, SEQ4() * -1, CURRENT_DATE) AS DAY_ROW
      FROM TABLE(GENERATOR(ROWCOUNT=>1096))  
  )
  SELECT TO_DATE(DAY_ROW) AS DATE 
        ,YEAR(DAY_ROW) AS YEAR
        ,QUARTER(DAY_ROW) AS QUARTER
        ,MONTH(DAY_ROW) AS MONTH_OF_YEAR
        ,MONTHNAME(DAY_ROW) AS MONTH_NAME
        ,WEEKOFYEAR(DAY_ROW) AS WEEK_OF_YEAR
        ,DAY(DAY_ROW) AS DAY_OF_MONTH
        ,DAYNAME(DAY_ROW) AS DAY_NAME
        ,DAYOFWEEKISO(DAY_ROW) AS DAY_OF_WEEK
        ,DAYOFYEAR(DAY_ROW) AS DAY_OF_YEAR
    FROM CTE_DATE_GENERATOR
;




create or replace view PROD_GLOBAL_MONITORING.PUBLISH.VW_WAREHOUSE_METERING_HISTORY_TEST(
	METERING_DATE,
	ORGANIZATION_NAME,
	ACCOUNT_NAME,
	ACCOUNT_LOCATOR,
	REGION,
	SERVICE_TYPE,
	START_TIME,
	END_TIME,
	WAREHOUSE_ID,
	WAREHOUSE_NAME,
	SECTION_NAME,
	CREDITS_USED,
	CREDITS_USED_COMPUTE,
	CREDITS_USED_CLOUD_SERVICES,
    CURRENCY,
    EFFECTIVE_RATE,
    COSTING_BILLED,
    COSTING_USED,
    COSTING_CLOUD_SERVICES
) as 
SELECT 
     A.METERING_DATE
    ,A.METERING_RECORD:ORGANIZATION_NAME::VARCHAR(16777216) AS ORGANIZATION_NAME
    ,A.METERING_RECORD:ACCOUNT_NAME::VARCHAR(16777216) AS ACCOUNT_NAME
    ,A.METERING_RECORD:ACCOUNT_LOCATOR::VARCHAR(16777216) AS ACCOUNT_LOCATOR
    ,A.METERING_RECORD:REGION::VARCHAR(16777216) AS REGION
    ,A.METERING_RECORD:SERVICE_TYPE::VARCHAR(25) AS SERVICE_TYPE
    ,A.METERING_RECORD:START_TIME::TIMESTAMP_LTZ(0) AS START_TIME
    ,A.METERING_RECORD:END_TIME::TIMESTAMP_LTZ(0) AS END_TIME
    ,A.METERING_RECORD:WAREHOUSE_ID::NUMBER(38,0) AS WAREHOUSE_ID
    ,A.METERING_RECORD:WAREHOUSE_NAME::VARCHAR(16777216) AS WAREHOUSE_NAME,
    CASE 
        WHEN warehouse_name ilike '%ETL%' AND warehouse_name NOT ilike '%DAYLIGHT%' AND warehouse_name NOT ilike '%CYRUS%' THEN 'ETL'
        WHEN warehouse_name ilike '%GEN%' AND warehouse_name NOT ilike '%DAYLIGHT%' AND warehouse_name NOT ilike '%CYRUS%' THEN 'FRONTEND'
        WHEN warehouse_name ilike '%TEC%' AND warehouse_name NOT ilike '%DAYLIGHT%' AND warehouse_name NOT ilike '%CYRUS%' THEN 'MAINTENANCE'
        WHEN (warehouse_name ilike '%GREY%' OR warehouse_name ilike 'AZ%') AND warehouse_name NOT ilike '%DAYLIGHT%' AND warehouse_name NOT ilike '%CYRUS%' THEN 'AUTONOMY_ZONES'
        WHEN warehouse_name ilike '%DAYLIGHT%' THEN 'DAYLIGHT'
        WHEN warehouse_name ilike '%CYRUS%' THEN 'CYRUS'
        ELSE 'OTHER'
     END AS SECTION
    ,A.METERING_RECORD:CREDITS_USED::NUMBER(38,9) AS CREDITS_USED
    ,A.METERING_RECORD:CREDITS_USED_COMPUTE::NUMBER(38,9) AS CREDITS_USED_COMPUTE
    ,A.METERING_RECORD:CREDITS_USED_CLOUD_SERVICES::NUMBER(38,9) AS CREDITS_USED_CLOUD_SERVICES 
    ,B.CURRENCY
    ,B.EFFECTIVE_RATE
    ,A.CREDITS_USED*B.EFFECTIVE_RATE AS COSTING_BILLED
    ,A.CREDITS_USED_COMPUTE*B.EFFECTIVE_RATE AS COSTING_USED
    ,A.CREDITS_USED_CLOUD_SERVICES*B.EFFECTIVE_RATE AS COSTING_CLOUD_SERVICES
FROM
    PROD_GLOBAL_MONITORING.CORE.WAREHOUSE_METERING_HISTORY_VARIANT A
left join
    (
    select  ACCOUNT_NAME
            ,CURRENCY
            ,EFFECTIVE_RATE //as EFFECTIVE_RATE
    from snowflake.organization_usage.RATE_SHEET_DAILY
    where  SERVICE_TYPE = 'COMPUTE'
    group by ACCOUNT_NAME, CURRENCY
    ) B
on B.ACCOUNT_NAME = A.METERING_RECORD:ACCOUNT_NAME::VARCHAR(16777216)
where 
(A.METERING_RECORD:ACCOUNT_NAME::VARCHAR(16777216) = B.ACCOUNT_NAME);



SELECT 
     ACCT.SNOWFLAKE_ACCOUNT_NAME
    ,USAGE.WAREHOUSE_NAME
    ,USAGE.METERING_DATE
    ,USAGE.CREDITS_USED
FROM  
    F_WAREHOUSE_METERING_DAILY_BY_SECTION USAGE
    JOIN
    D_SNOWFLAKE_ACCOUNT ACCT ON USAGE.ACCOUNT_NAME = ACCT.SNOWFLAKE_ACCOUNT_NAME
WHERE 1=1
    AND USAGE.METERING_DATE = :daterange
    AND USAGE.SECTION_NAME in ('DAYLIGHT','CYRUS')
    AND acct.SNOWFLAKE_ACCOUNT_CATEGORY = :f02_uscdp_cyrus_account_category
    AND acct.SNOWFLAKE_ACCOUNT_NAME = :f03_uscdp_cyrus_account_name
    AND USAGE.WAREHOUSE_NAME = :f04_warehouse_name
    AND USAGE.WAREHOUSE_NAME is not null


SELECT 
     FACT.CREDITS_USED * (RSD.EFFECTIVE_RATE * IFNULL(CR.CONVERSION_RATE, 1)) AS AMOUNT_USED_IN_EUROS
    ,FACT.METERING_DATE
    ,FACT.ACCOUNT_NAME
FROM
    PUBLISH.F_WAREHOUSE_METERING_DAILY_BY_SECTION FACT
    LEFT JOIN
    SNOWFLAKE.ORGANIZATION_USAGE.RATE_SHEET_DAILY  RSD
        ON FACT.ACCOUNT_NAME = RSD.ACCOUNT_NAME 
        AND FACT.METERING_DATE = RSD.DATE
        AND RSD.usage_type = 'compute'
    LEFT JOIN PUBLISH.D_CONVERSION_RATES AS CR 
        ON RSD.CURRENCY = CR.TO_CURRENCY AND RSD.DATE BETWEEN CR.CONVERSION_DATE_VALID_FROM AND CR.CONVERSION_DATE_VALID_TO
WHERE 
    FACT.SECTION_NAME = 'CYRUS'
    AND FACT.ACCOUNT_NAME ILIKE '%AMERICA%'  
    AND FACT.METERING_DATE = :daterange
    AND FACT.WAREHOUSE_NAME = :f04_warehouse_name
ORDER BY 2 desc


